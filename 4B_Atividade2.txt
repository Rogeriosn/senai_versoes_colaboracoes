# Exerc√≠cio 04b - Atividade 2 - Pesquisa individual de boas pr√°ticas de versionamento
### Versionamento de C√≥digo: Boas Pr√°ticas e Ferramentas para Controle de Vers√£o.

~~~ bash
Criado por: Rog√©rio Nascimento

E-mail: rogeriorsnascimento@gmail.com
~~~
---
## üîÆ Dicas de Boas Pr√°ticas para Versionamento de software
O desenvolvimento de software √© uma atividade din√¢mica e cont√≠nua, onde as equipes trabalham constantemente para adicionar novas funcionalidades, corrigir bugs e aprimorar o desempenho dos sistemas. Portanto, o versionamento de c√≥digo surge como uma pe√ßa-chave para o sucesso dos projetos, permitindo um controle preciso das altera√ß√µes realizadas no c√≥digo-fonte e proporcionando uma colabora√ß√£o eficiente entre os desenvolvedores. 



#### O que √© Versionamento de C√≥digo?
O versionamento de c√≥digo, tamb√©m conhecido como controle de vers√£o, √© uma pr√°tica que consiste em acompanhar e registrar todas as altera√ß√µes feitas nos arquivos de c√≥digo-fonte de um projeto ao longo do tempo. Afinal, cada modifica√ß√£o feita, seja ela uma adi√ß√£o de c√≥digo, corre√ß√£o de bugs ou qualquer outra mudan√ßa, √© armazenada em um sistema de controle de vers√£o, como o Git. Todavia, essa abordagem possibilita o rastreamento detalhado das modifica√ß√µes, permitindo que os desenvolvedores visualizem e acessem vers√µes anteriores do c√≥digo facilmente.

Atrav√©s do versionamento de c√≥digo, os desenvolvedores entendem o hist√≥rico completo de mudan√ßas realizadas em um arquivo, quem as fez e quando foram feitas. Essa transpar√™ncia ajuda a identificar erros e entender como o c√≥digo evoluiu ao longo do tempo. Al√©m disso, o controle de vers√£o √© uma ferramenta essencial para o trabalho colaborativo, permitindo que diversos desenvolvedores trabalhem em paralelo em diferentes partes do projeto sem comprometer a estabilidade do c√≥digo.

#### Como funciona?
O processo de versionamento de c√≥digo funciona por meio de sistemas de controle que registram e gerenciam altera√ß√µes feitas no c√≥digo-fonte de um projeto de software. Cada altera√ß√£o √© registrada como um "commit", contendo informa√ß√µes detalhadas sobre as modifica√ß√µes efetuadas. Esses commits s√£o organizados em uma linha do tempo, permitindo o acesso f√°cil a vers√µes anteriores do c√≥digo. 

Al√©m disso, o uso de "branches" possibilita o trabalho em funcionalidades ou corre√ß√µes separadamente, sem afetar a vers√£o principal do projeto. Isso facilita a colabora√ß√£o entre desenvolvedores e possibilita a realiza√ß√£o de testes e experimenta√ß√µes sem comprometer a estabilidade do c√≥digo. Com o versionamento de c√≥digo, equipes podem trabalhar de forma organizada e segura, garantindo a integridade e a evolu√ß√£o do projeto ao longo do tempo.

---

#### Import√¢ncia do Versionamento de C√≥digo
Inegavelmente, o versionamento de c√≥digo desempenha um papel crucial no desenvolvimento de software, trazendo diversos benef√≠cios para as equipes de desenvolvimento e para o projeto como um todo. Confira abaixo alguns dos benef√≠cios:

#### 1. Utilizar um Sistema de Controle de Vers√£o
O primeiro passo no processo de versionamento de c√≥digo √© escolher e utilizar um sistema de controle de vers√£o (VCS - Version Control System). O VCS √© uma ferramenta que permite registrar e gerenciar as altera√ß√µes feitas no c√≥digo-fonte ao longo do tempo. Ele mant√©m um hist√≥rico detalhado de cada modifica√ß√£o realizada, incluindo informa√ß√µes como quem fez a altera√ß√£o, quando foi feita e uma descri√ß√£o do que foi alterado.

Existem diferentes tipos de sistemas de controle de vers√£o, sendo o Git um dos mais populares e amplamente utilizados atualmente. O Git √© um sistema de controle de vers√£o distribu√≠do, o que significa que cada desenvolvedor possui uma c√≥pia completa do reposit√≥rio do projeto em seu ambiente local, tornando-o eficiente e permitindo trabalhar offline. Al√©m do Git, outros sistemas de controle de vers√£o conhecidos incluem o Subversion (SVN) e o Mercurial.

#### 2. Reposit√≥rio
O reposit√≥rio armazena todo o c√≥digo-fonte e o hist√≥rico de altera√ß√µes. √â hospedado em diferentes plataformas, como servidores locais, servi√ßos de hospedagem na nuvem, como o GitHub ou o GitLab, ou em ambientes de controle de vers√µes corporativos. Todos os desenvolvedores envolvidos no projeto t√™m o reposit√≥rio central como refer√™ncia, compartilhando e integrando as altera√ß√µes a partir dele.

#### 3. Organizar a Estrutura de Branches
Contudo, para evitar conflitos e confus√µes no desenvolvimento do projeto, √© recomendado organizar a estrutura de branches de forma clara e consistente. Geralmente, √© utilizado um branch principal, como o main, master ou develop, que representa a vers√£o est√°vel do projeto. Al√©m disso, branches espec√≠ficos podem ser criados para trabalhar em funcionalidades ou corre√ß√µes separadamente. Todavia, essa abordagem garante uma separa√ß√£o clara das altera√ß√µes e facilita a integra√ß√£o de mudan√ßas no c√≥digo principal.

#### 4. Commits Significativos
Ao realizar commits, √© importante faz√™-los de forma significativa e bem documentada. Cada commit deve representar uma altera√ß√£o coesa e at√¥mica, ou seja, relacionada a uma √∫nica tarefa ou corre√ß√£o. Outrossim, a mensagem de commit deve ser clara e descritiva, explicando o que foi feito e, quando necess√°rio, o porqu√™. Commits significativos tornam o hist√≥rico de altera√ß√µes mais leg√≠vel e facilitam a compreens√£o do progresso do projeto. Al√©m disso, commits bem estruturados auxiliam na identifica√ß√£o de erros espec√≠ficos e na implementa√ß√£o de melhorias em vers√µes futuras.

#### 5. Mesclagem (Merge) e Resolu√ß√£o de Conflitos
No processo de desenvolvimento, a equipe frequentemente enfrenta conflitos quando mescla ou integra diferentes vers√µes do c√≥digo ao projeto principal. Entretanto, √© de suma import√¢ncia que a equipe resolva esses conflitos de forma organizada, garantindo a correta incorpora√ß√£o de todas as altera√ß√µes ao c√≥digo.

Assim, a equipe de desenvolvimento desempenha um papel crucial na resolu√ß√£o de conflitos, garantindo a estabilidade do projeto e considerando todas as altera√ß√µes feitas. Ao lidar com conflitos, os desenvolvedores asseguram a integra√ß√£o coerente das mudan√ßas realizadas por diferentes membros da equipe, preservando a funcionalidade e a qualidade do c√≥digo.

#### 6. Documenta√ß√£o e Tags de Vers√£o
Utilizar tags de vers√£o para marcar lan√ßamentos significativos do projeto. As tags permitem que a equipe identifique facilmente vers√µes est√°veis e importantes do software. Al√©m disso, √© fundamental documentar os detalhes das vers√µes, como novas funcionalidades adicionadas, bugs corrigidos e altera√ß√µes significativas. A documenta√ß√£o das vers√µes auxilia no processo de comunica√ß√£o entre os membros da equipe e permite que os usu√°rios finais entendam as mudan√ßas feitas no software. Uma documenta√ß√£o clara e abrangente √© valiosa para a equipe e para os stakeholders, garantindo a transpar√™ncia e a compreens√£o do projeto em diferentes fases do desenvolvimento.

Ao adotar as melhores pr√°ticas e utilizar um sistema de controle de vers√£o adequado, os desenvolvedores podem trabalhar de forma mais eficiente, facilitando a colabora√ß√£o e evitando problemas decorrentes de altera√ß√µes mal gerenciadas.

#### 7. Controle de Acesso e Permiss√µes em Reposit√≥rios
A defini√ß√£o cuidadosa dos controles de acesso em reposit√≥rios de c√≥digo √© uma pr√°tica essencial para garantir a seguran√ßa e a integridade do projeto. Estabelecer permiss√µes apropriadas assegura que apenas membros autorizados possam efetuar mudan√ßas cruciais, protegendo o c√≥digo contra altera√ß√µes n√£o autorizadas.

Ao configurar o controle de acesso, √© crucial categorizar os membros da equipe com base em suas responsabilidades. Conceder permiss√µes espec√≠ficas a cada fun√ß√£o, como leitura, grava√ß√£o ou administra√ß√£o, ajuda a manter a governan√ßa adequada sobre o reposit√≥rio. Por exemplo, desenvolvedores podem ter acesso de grava√ß√£o para contribuir com altera√ß√µes, enquanto revisores podem focar em revis√µes sem realizar modifica√ß√µes diretas.

Al√©m disso, ao restringir o acesso a certas partes do c√≥digo, especialmente aquelas relacionadas a funcionalidades cr√≠ticas, a equipe reduz o risco de falhas inadvertidas. Essa abordagem n√£o apenas fortalece a seguran√ßa do projeto, mas tamb√©m facilita a detec√ß√£o r√°pida e a corre√ß√£o de problemas potenciais.

Em resumo, o controle adequado de acesso e permiss√µes em reposit√≥rios √© um pilar fundamental para um ambiente de desenvolvimento seguro e organizado. Garantir que apenas membros autorizados tenham acesso a determinadas funcionalidades preserva a confidencialidade e a estabilidade do c√≥digo, contribuindo para o sucesso cont√≠nuo do projeto.

---
## ‚úçÔ∏è Fonte de Pesquisa
### Sites de Pesquisa e Estudos
Este material de Boas Pr√°ticas de Versionamento foi produzido e aplicado a partir de pesquisas realizadas em:

- [SENAI](https://sp.senaiead.senai.br/) 
- [Casa do Desenvolvedor](https://blog.casadodesenvolvedor.com.br/versionamento-de-codigo/)

---